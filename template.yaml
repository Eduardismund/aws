AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Smart Meeting Intelligence Engine - Production Ready AWS SDK v3 Implementation
Transform:
  - AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs20.x  # Modern runtime - AWS SDK v3 only
    Architectures:
      - x86_64
    Timeout: 30
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  LogRetentionDays:
    Type: Number
    Default: 30
    Description: CloudWatch logs retention period in days

Resources:
  # DynamoDB table with stream enabled for transcription starter
  SampleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-meetings"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Application
          Value: SmartMeetingEngine
        - Key: Environment
          Value: Production

  # S3 Bucket with EventBridge enabled - NO CIRCULAR DEPENDENCY
  MeetingAudioBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - "*"
            MaxAge: 3000
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldFiles
            Status: Enabled
            ExpirationInDays: 365
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Application
          Value: SmartMeetingEngine
        - Key: Environment
          Value: Production

  # Function: Generate presigned URLs
  PresignedUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-PresignedUrlFunction"
      Handler: src/handlers/presigned-url.presignedUrlHandler
      MemorySize: 128
      Description: Generate presigned URLs for direct S3 uploads (AWS SDK v3)
      Policies:
        - S3WritePolicy:
            BucketName: !Ref MeetingAudioBucket
      Environment:
        Variables:
          AUDIO_BUCKET: !Ref MeetingAudioBucket
      Events:
        PresignedApi:
          Type: Api
          Properties:
            Path: /presigned-url
            Method: post
        PresignedOptions:
          Type: Api
          Properties:
            Path: /presigned-url
            Method: options

  # Function: Query individual meetings
  MeetingQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-MeetingQueryFunction"
      Handler: src/handlers/meeting-query.meetingQueryHandler
      MemorySize: 128
      Description: Query individual meeting data (AWS SDK v3)
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        GetMeetingApi:
          Type: Api
          Properties:
            Path: /meeting/{meetingId}
            Method: get
        GetMeetingOptions:
          Type: Api
          Properties:
            Path: /meeting/{meetingId}
            Method: options

  # Function: Process S3 uploads - ENHANCED
  AudioUploadProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-AudioUploadProcessorFunction"
      Handler: src/handlers/audio-upload-processor.audioUploadProcessor
      MemorySize: 256
      Timeout: 60
      Description: Process S3 audio uploads and create meeting records (AWS SDK v3)
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
        - S3ReadPolicy:
            BucketName: !Ref MeetingAudioBucket
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: "*"
      Environment:
        Variables:
          AUDIO_BUCKET: !Ref MeetingAudioBucket
          SAMPLE_TABLE: !Ref SampleTable

  # Function: Start transcription (triggered by DynamoDB streams)
  TranscriptionStarterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-TranscriptionStarterFunction"
      Handler: src/handlers/transcription-starter.transcriptionStarter
      MemorySize: 256
      Timeout: 60
      Description: Start Amazon Transcribe jobs (AWS SDK v3)
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
        - Statement:
            - Effect: Allow
              Action:
                - transcribe:StartTranscriptionJob
                - transcribe:GetTranscriptionJob
                - transcribe:ListTranscriptionJobs
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectVersion
                - s3:PutObject
                - s3:PutObjectAcl
              Resource: !Sub "arn:aws:s3:::${MeetingAudioBucket}/*"
            - Effect: Allow
              Action:
                - s3:ListBucket
                - s3:GetBucketLocation
              Resource: !Sub "arn:aws:s3:::${MeetingAudioBucket}"
      Environment:
        Variables:
          AUDIO_BUCKET: !Ref MeetingAudioBucket
          SAMPLE_TABLE: !Ref SampleTable

  # Function: Handle transcription completion
  TranscriptionCompleteProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-TranscriptionCompleteProcessorFunction"
      Handler: src/handlers/transcription-complete-processor.transcriptionCompleteProcessor
      MemorySize: 512
      Timeout: 300
      Description: Process completed transcription jobs (AWS SDK v3)
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectVersion
              Resource: !Sub "arn:aws:s3:::${MeetingAudioBucket}/*"
            - Effect: Allow
              Action:
                - transcribe:GetTranscriptionJob
              Resource: "*"
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: "*"
      Environment:
        Variables:
          AUDIO_BUCKET: !Ref MeetingAudioBucket
          SAMPLE_TABLE: !Ref SampleTable

  # Function: Handle task extraction
  TaskExtractorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-TaskExtractorFunction"
      Handler: src/handlers/task-extractor.taskExtractorHandler
      MemorySize: 1024
      Timeout: 300
      Description: Extract actionable tasks from transcriptions using Bedrock Claude Sonnet 3.5
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
        - Statement:
            - Effect: Allow
              Action: [bedrock:InvokeModel]
              Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-5-sonnet-20240620-v1:0"
            - Effect: Allow
              Action: [events:PutEvents]
              Resource: "*"
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref SampleTable

  # FIXED: Consistent naming for Jira Task Analyzer
  JiraTaskAnalyzerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-JiraTaskAnalyzerFunction"
      Handler: src/handlers/jira-task-analyzer.jiraTaskAnalyzerHandler
      MemorySize: 1024
      Timeout: 60
      Description: Analyze Jira tasks based on the tasks existing in Jira extracted from API
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-5-sonnet-20240620-v1:0"
            - Effect: Allow
              Action: [events:PutEvents]
              Resource: "*"
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:jira-meeting-tasks-config*"
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref SampleTable
          JIRA_SECRET_NAME: "jira-meeting-tasks-config"

  JiraTaskCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-JiraTaskCreateFunction"
      Handler: src/handlers/jira-task-creation.jiraTaskCreationHandler
      MemorySize: 1024
      Timeout: 60
      Description: Create Jira tasks based on the tasks extracted using the Bedrock Claude Sonnet 3.5
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-5-sonnet-20240620-v1:0"
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:jira-meeting-tasks-config*"
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref SampleTable
          JIRA_SECRET_NAME: "jira-meeting-tasks-config"

  JiraTaskUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-JiraTaskUpdateFunction"
      Handler: src/handlers/jira-task-update.jiraTaskUpdateHandler
      MemorySize: 1024
      Timeout: 60
      Description: Update Jira tasks based on new extracted tasks
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-5-sonnet-20240620-v1:0"
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:jira-meeting-tasks-config*"
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref SampleTable
          JIRA_SECRET_NAME: "jira-meeting-tasks-config"

  JiraTaskFetcherFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-JiraTaskFetcherFunction"
      Handler: src/handlers/jira-tasks-fetch.jiraTasksFetchHandler
      MemorySize: 256
      Timeout: 30
      Description: Fetch Jira tasks from API Gateway
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:jira-meeting-tasks-config*"
      Environment:
        Variables:
          JIRA_SECRET_NAME: "jira-meeting-tasks-config"
      Events:
        GetTasksApi:
          Type: Api
          Properties:
            Path: /jira/tasks
            Method: get
        GetTasksOptions:
          Type: Api
          Properties:
            Path: /jira/tasks
            Method: options

  # EventBridge Rule for S3 uploads - SIMPLIFIED PATTERN
  AudioUploadEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${AWS::StackName}-AudioUploadEventRule"
      Description: Trigger when audio files are uploaded to meetings folder
      EventPattern:
        source: [ "aws.s3" ]
        detail-type: [ "Object Created" ]
        detail:
          bucket:
            name: [ !Ref MeetingAudioBucket ]
          object:
            key:
              - prefix: "meetings/"
      State: ENABLED
      Targets:
        - Arn: !GetAtt AudioUploadProcessorFunction.Arn
          Id: "AudioUploadTarget"

  # EventBridge Rule for custom transcription events
  TranscriptionTriggerEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${AWS::StackName}-TranscriptionTriggerEventRule"
      Description: Trigger transcription when meeting is ready
      EventPattern:
        source:
          - "meeting.app"
        detail-type:
          - "Meeting Ready for Transcription"
      State: ENABLED
      Targets:
        - Arn: !GetAtt TranscriptionStarterFunction.Arn
          Id: "TranscriptionTriggerTarget"

  # EventBridge Rule for transcription completion
  TranscriptionCompleteEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${AWS::StackName}-TranscriptionCompleteEventRule"
      Description: Trigger when transcription completes
      EventPattern:
        source:
          - "aws.transcribe"
        detail-type:
          - "Transcribe Job State Change"
        detail:
          TranscriptionJobStatus:
            - "COMPLETED"
            - "FAILED"
      State: ENABLED
      Targets:
        - Arn: !GetAtt TranscriptionCompleteProcessorFunction.Arn
          Id: "TranscriptionCompleteTarget"

  TaskExtractionTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${AWS::StackName}-TaskExtractionTriggerRule"
      Description: Trigger task extraction when transcription completes
      EventPattern:
        source: ["meeting.app"]
        detail-type: ["Transcription Completed"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt TaskExtractorFunction.Arn
          Id: "TaskExtractionTarget"

  # FIXED: Consistent function reference
  JiraTaskAnalyzerTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${AWS::StackName}-JiraTaskAnalyzerTriggerRule"
      Description: Trigger Jira task analysis when task extraction completes
      EventPattern:
        source: ["meeting.app"]
        detail-type: ["Task Extraction Completed"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt JiraTaskAnalyzerFunction.Arn
          Id: "JiraTaskAnalyzerTarget"

  JiraTaskCreateTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${AWS::StackName}-JiraTaskCreateTriggerRule"
      Description: Trigger Jira task creation when analysis completes
      EventPattern:
        source: ["meeting.app"]
        detail-type: ["Tasks Ready for Creation"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt JiraTaskCreateFunction.Arn
          Id: "JiraTaskCreateTarget"

  JiraTaskUpdateTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${AWS::StackName}-JiraTaskUpdateTriggerRule"
      Description: Trigger Jira task update when analysis completes
      EventPattern:
        source: ["meeting.app"]
        detail-type: ["Tasks Ready for Update"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt JiraTaskUpdateFunction.Arn
          Id: "JiraTaskUpdateTarget"

  # Lambda permissions for EventBridge
  AudioUploadEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AudioUploadProcessorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AudioUploadEventRule.Arn

  TranscriptionCompleteEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TranscriptionCompleteProcessorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TranscriptionCompleteEventRule.Arn

  TranscriptionTriggerEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TranscriptionStarterFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TranscriptionTriggerEventRule.Arn

  TaskExtractionTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TaskExtractorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TaskExtractionTriggerRule.Arn

  # FIXED: Correct function references
  JiraTaskAnalyzerTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref JiraTaskAnalyzerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt JiraTaskAnalyzerTriggerRule.Arn

  JiraTaskCreateTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref JiraTaskCreateFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt JiraTaskCreateTriggerRule.Arn

  JiraTaskUpdateTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref JiraTaskUpdateFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt JiraTaskUpdateTriggerRule.Arn

  # CloudWatch Log Groups with retention
  PresignedUrlLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PresignedUrlFunction}"
      RetentionInDays: !Ref LogRetentionDays

  MeetingQueryLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${MeetingQueryFunction}"
      RetentionInDays: !Ref LogRetentionDays

  AudioUploadProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AudioUploadProcessorFunction}"
      RetentionInDays: !Ref LogRetentionDays

  TranscriptionStarterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${TranscriptionStarterFunction}"
      RetentionInDays: !Ref LogRetentionDays

  TranscriptionCompleteProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${TranscriptionCompleteProcessorFunction}"
      RetentionInDays: !Ref LogRetentionDays

  TaskExtractorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${TaskExtractorFunction}"
      RetentionInDays: !Ref LogRetentionDays

  # ADDED: Missing log groups
  JiraTaskAnalyzerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${JiraTaskAnalyzerFunction}"
      RetentionInDays: !Ref LogRetentionDays

  JiraTaskCreateLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${JiraTaskCreateFunction}"
      RetentionInDays: !Ref LogRetentionDays

  JiraTaskUpdateLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${JiraTaskUpdateFunction}"
      RetentionInDays: !Ref LogRetentionDays

  JiraTaskFetcherLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${JiraTaskFetcherFunction}"
      RetentionInDays: !Ref LogRetentionDays

Outputs:
  # API Endpoints
  ApiGatewayEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"

  PresignedUrlEndpoint:
    Description: "Presigned URL endpoint"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/presigned-url"
    Export:
      Name: !Sub "${AWS::StackName}-PresignedUrlEndpoint"

  # Resource Names
  AudioBucketName:
    Description: "S3 Bucket for audio files"
    Value: !Ref MeetingAudioBucket
    Export:
      Name: !Sub "${AWS::StackName}-AudioBucket"

  DynamoDBTableName:
    Description: "DynamoDB table name for meetings"
    Value: !Ref SampleTable
    Export:
      Name: !Sub "${AWS::StackName}-DynamoDBTable"

  # Function Names for debugging
  AudioUploadProcessorFunctionName:
    Description: "Audio upload processor function name"
    Value: !Ref AudioUploadProcessorFunction
    Export:
      Name: !Sub "${AWS::StackName}-AudioUploadFunction"

  TranscriptionStarterFunctionName:
    Description: "Transcription starter function name"
    Value: !Ref TranscriptionStarterFunction
    Export:
      Name: !Sub "${AWS::StackName}-TranscriptionStarterFunction"

  TranscriptionCompleteProcessorFunctionName:
    Description: "Transcription complete processor function name"
    Value: !Ref TranscriptionCompleteProcessorFunction
    Export:
      Name: !Sub "${AWS::StackName}-TranscriptionCompleteFunction"

  TaskExtractorFunctionName:
    Description: "Task extractor function name"
    Value: !Ref TaskExtractorFunction
    Export:
      Name: !Sub "${AWS::StackName}-TaskExtractorFunction"

  JiraTaskAnalyzerFunctionName:
    Description: "Jira task analyzer function name"
    Value: !Ref JiraTaskAnalyzerFunction
    Export:
      Name: !Sub "${AWS::StackName}-JiraTaskAnalyzerFunction"

  JiraTaskCreateFunctionName:
    Description: "Jira task creation from extracted tasks"
    Value: !Ref JiraTaskCreateFunction
    Export:
      Name: !Sub "${AWS::StackName}-JiraTaskCreateFunction"

  JiraTaskUpdateFunctionName:
    Description: "Jira task update function name"
    Value: !Ref JiraTaskUpdateFunction
    Export:
      Name: !Sub "${AWS::StackName}-JiraTaskUpdateFunction"